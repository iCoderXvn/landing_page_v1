const Database = require('better-sqlite3');
const path = require('path');

const dbPath = path.join(__dirname, 'data/blog.db');
const db = new Database(dbPath);

console.log('üîß Starting database migration...');

try {
  // Check existing columns
  const tableInfo = db.prepare("PRAGMA table_info(posts)").all();
  const existingColumns = tableInfo.map(col => col.name);
  console.log('Existing columns:', existingColumns);

  const requiredColumns = [
    { name: 'slug', type: 'TEXT' },
    { name: 'excerpt', type: 'TEXT' },
    { name: 'meta_description', type: 'TEXT' },
    { name: 'keywords', type: 'TEXT' },
    { name: 'featured_image', type: 'TEXT' },
    { name: 'scheduled_at', type: 'DATETIME' },
    { name: 'updated_at', type: 'DATETIME DEFAULT CURRENT_TIMESTAMP' }
  ];

  // Add missing columns
  for (const column of requiredColumns) {
    if (!existingColumns.includes(column.name)) {
      console.log(`‚úÖ Adding column: ${column.name}`);
      db.exec(`ALTER TABLE posts ADD COLUMN ${column.name} ${column.type}`);
    } else {
      console.log(`‚è≠Ô∏è  Column ${column.name} already exists`);
    }
  }

  // Generate slugs for existing posts
  const postsWithoutSlugs = db.prepare("SELECT id, title FROM posts WHERE slug IS NULL OR slug = ''").all();
  
  if (postsWithoutSlugs.length > 0) {
    console.log(`\nüìù Generating slugs for ${postsWithoutSlugs.length} posts...`);
    
    // Vietnamese character mapping
    const vietnameseMap = {
      '√†': 'a', '√°': 'a', '·∫°': 'a', '·∫£': 'a', '√£': 'a', '√¢': 'a', '·∫ß': 'a', '·∫•': 'a', '·∫≠': 'a', '·∫©': 'a', '·∫´': 'a',
      'ƒÉ': 'a', '·∫±': 'a', '·∫Ø': 'a', '·∫∑': 'a', '·∫≥': 'a', '·∫µ': 'a',
      '√®': 'e', '√©': 'e', '·∫π': 'e', '·∫ª': 'e', '·∫Ω': 'e', '√™': 'e', '·ªÅ': 'e', '·∫ø': 'e', '·ªá': 'e', '·ªÉ': 'e', '·ªÖ': 'e',
      '√¨': 'i', '√≠': 'i', '·ªã': 'i', '·ªâ': 'i', 'ƒ©': 'i',
      '√≤': 'o', '√≥': 'o', '·ªç': 'o', '·ªè': 'o', '√µ': 'o', '√¥': 'o', '·ªì': 'o', '·ªë': 'o', '·ªô': 'o', '·ªï': 'o', '·ªó': 'o',
      '∆°': 'o', '·ªù': 'o', '·ªõ': 'o', '·ª£': 'o', '·ªü': 'o', '·ª°': 'o',
      '√π': 'u', '√∫': 'u', '·ª•': 'u', '·ªß': 'u', '≈©': 'u', '∆∞': 'u', '·ª´': 'u', '·ª©': 'u', '·ª±': 'u', '·ª≠': 'u', '·ªØ': 'u',
      '·ª≥': 'y', '√Ω': 'y', '·ªµ': 'y', '·ª∑': 'y', '·ªπ': 'y',
      'ƒë': 'd',
      '√Ä': 'A', '√Å': 'A', '·∫†': 'A', '·∫¢': 'A', '√É': 'A', '√Ç': 'A', '·∫¶': 'A', '·∫§': 'A', '·∫¨': 'A', '·∫®': 'A', '·∫™': 'A',
      'ƒÇ': 'A', '·∫∞': 'A', '·∫Æ': 'A', '·∫∂': 'A', '·∫≤': 'A', '·∫¥': 'A',
      '√à': 'E', '√â': 'E', '·∫∏': 'E', '·∫∫': 'E', '·∫º': 'E', '√ä': 'E', '·ªÄ': 'E', '·∫æ': 'E', '·ªÜ': 'E', '·ªÇ': 'E', '·ªÑ': 'E',
      '√å': 'I', '√ç': 'I', '·ªä': 'I', '·ªà': 'I', 'ƒ®': 'I',
      '√í': 'O', '√ì': 'O', '·ªå': 'O', '·ªé': 'O', '√ï': 'O', '√î': 'O', '·ªí': 'O', '·ªê': 'O', '·ªò': 'O', '·ªî': 'O', '·ªñ': 'O',
      '∆†': 'O', '·ªú': 'O', '·ªö': 'O', '·ª¢': 'O', '·ªû': 'O', '·ª†': 'O',
      '√ô': 'U', '√ö': 'U', '·ª§': 'U', '·ª¶': 'U', '≈®': 'U', '∆Ø': 'U', '·ª™': 'U', '·ª®': 'U', '·ª∞': 'U', '·ª¨': 'U', '·ªÆ': 'U',
      '·ª≤': 'Y', '√ù': 'Y', '·ª¥': 'Y', '·ª∂': 'Y', '·ª∏': 'Y',
      'ƒê': 'D'
    };

    function generateSlug(title) {
      // Replace Vietnamese characters
      let slug = title.normalize('NFD');
      for (const [vietnamese, latin] of Object.entries(vietnameseMap)) {
        slug = slug.replace(new RegExp(vietnamese, 'g'), latin);
      }
      
      // Convert to lowercase and clean up
      slug = slug
        .toLowerCase()
        .replace(/[\u0300-\u036f]/g, '') // Remove remaining diacritics
        .replace(/[^a-z0-9\s-]/g, '') // Remove special characters
        .replace(/\s+/g, '-') // Replace spaces with hyphens
        .replace(/-+/g, '-') // Remove multiple hyphens
        .replace(/^-|-$/g, ''); // Remove leading/trailing hyphens
      
      return slug;
    }
    
    for (const post of postsWithoutSlugs) {
      let slug = generateSlug(post.title);
      
      // Ensure unique slug
      let finalSlug = slug;
      let counter = 1;
      while (db.prepare("SELECT id FROM posts WHERE slug = ? AND id != ?").get(finalSlug, post.id)) {
        finalSlug = `${slug}-${counter}`;
        counter++;
      }
      
      db.prepare("UPDATE posts SET slug = ? WHERE id = ?").run(finalSlug, post.id);
      console.log(`   ‚úì "${post.title}" ‚Üí "${finalSlug}"`);
    }
  } else {
    console.log('\n‚úÖ All posts already have slugs');
  }

  console.log('\nüéâ Migration completed successfully!\n');
  
} catch (error) {
  console.error('\n‚ùå Migration failed:', error);
  process.exit(1);
} finally {
  db.close();
}
