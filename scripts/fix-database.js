const Database = require('better-sqlite3');
const path = require('path');

// Connect to database
const dbPath = path.join(process.cwd(), 'data', 'admin.db');
const db = new Database(dbPath);

console.log('üîÑ Fixing database schema...');

try {
  // Check current schema
  const tableInfo = db.prepare("PRAGMA table_info(posts)").all();
  console.log('Current posts table columns:', tableInfo.map(col => col.name));
  
  // Check if slug column exists
  const hasSlug = tableInfo.some(col => col.name === 'slug');
  const hasViewCount = tableInfo.some(col => col.name === 'view_count');
  
  if (!hasSlug) {
    console.log('‚ûï Adding slug column...');
    db.exec('ALTER TABLE posts ADD COLUMN slug TEXT');
  } else {
    console.log('‚úÖ Slug column already exists');
  }
  
  if (!hasViewCount) {
    console.log('‚ûï Adding view_count column...');
    db.exec('ALTER TABLE posts ADD COLUMN view_count INTEGER DEFAULT 0');
  } else {
    console.log('‚úÖ View_count column already exists');
  }
  
  // Update all existing posts to have default view_count if null
  console.log('üîÑ Updating existing posts...');
  const updateViewCount = db.prepare('UPDATE posts SET view_count = 0 WHERE view_count IS NULL');
  const viewCountUpdated = updateViewCount.run();
  console.log(`‚úÖ Updated ${viewCountUpdated.changes} posts with default view count`);
  
  // Generate slugs for posts that don't have them
  const postsWithoutSlugs = db.prepare("SELECT id, title FROM posts WHERE slug IS NULL OR slug = ''").all();
  
  if (postsWithoutSlugs.length > 0) {
    console.log(`üîÑ Generating slugs for ${postsWithoutSlugs.length} posts...`);
    
    // Simple slug generation function
    function generateSlug(title) {
      return title
        .toLowerCase()
        .trim()
        .replace(/[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ]/g, 'a')
        .replace(/[√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ]/g, 'e')
        .replace(/[√¨√≠·ªã·ªâƒ©]/g, 'i')
        .replace(/[√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°]/g, 'o')
        .replace(/[√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ]/g, 'u')
        .replace(/[·ª≥√Ω·ªµ·ª∑·ªπ]/g, 'y')
        .replace(/ƒë/g, 'd')
        .replace(/[√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥]/g, 'A')
        .replace(/[√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ]/g, 'E')
        .replace(/[√å√ç·ªä·ªàƒ®]/g, 'I')
        .replace(/[√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†]/g, 'O')
        .replace(/[√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ]/g, 'U')
        .replace(/[·ª≤√ù·ª¥·ª∂·ª∏]/g, 'Y')
        .replace(/ƒê/g, 'D')
        .replace(/\s+/g, '-')
        .replace(/[^a-z0-9-]/gi, '')
        .replace(/-+/g, '-')
        .replace(/^-+|-+$/g, '');
    }
    
    const existingSlugs = db.prepare("SELECT slug FROM posts WHERE slug IS NOT NULL AND slug != ''").all()
      .map(row => row.slug);
    
    const updateSlug = db.prepare('UPDATE posts SET slug = ? WHERE id = ?');
    
    postsWithoutSlugs.forEach((post, index) => {
      let baseSlug = generateSlug(post.title) || `post-${post.id}`;
      let slug = baseSlug;
      let counter = 1;
      
      // Ensure unique slug
      while (existingSlugs.includes(slug)) {
        slug = `${baseSlug}-${counter}`;
        counter++;
      }
      
      updateSlug.run(slug, post.id);
      existingSlugs.push(slug);
      console.log(`   ${index + 1}. "${post.title}" ‚Üí "${slug}"`);
    });
    
    console.log('‚úÖ Slugs generated successfully');
  } else {
    console.log('‚úÖ All posts already have slugs');
  }
  
  // Verify the final schema
  const finalTableInfo = db.prepare("PRAGMA table_info(posts)").all();
  console.log('\n‚úÖ Final posts table schema:');
  finalTableInfo.forEach(col => {
    console.log(`   ${col.name}: ${col.type} ${col.notnull ? 'NOT NULL' : ''} ${col.dflt_value ? `DEFAULT ${col.dflt_value}` : ''}`);
  });
  
  console.log('\nüéâ Database schema fixed successfully!');
  
} catch (error) {
  console.error('‚ùå Error fixing database:', error);
} finally {
  db.close();
}